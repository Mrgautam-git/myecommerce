import React, { useState, useEffect } from 'react';
import './Product.css';

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [cart, setCart] = useState([]);
  const [addingToCart, setAddingToCart] = useState(null); // Track product being added to cart
  const [categories, setCategories] = useState([]); // Track categories
  const [selectedCategory, setSelectedCategory] = useState(null); // Track selected category

  const userId = 1; // Replace with dynamic user ID when authentication is implemented

  // Fetch categories
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await fetch('http://localhost:5000/categories');
        if (!response.ok) {
          throw new Error('Failed to fetch categories');
        }
        const data = await response.json();
        setCategories(data);
      } catch (err) {
        setError(err.message);
      }
    };

    fetchCategories();
  }, []);

  // Fetch products based on selected category
  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      try {
        const url = selectedCategory
          ? `http://localhost:5000/products?category_id=${selectedCategory}`
          : 'http://localhost:5000/products';
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error('Failed to fetch products');
        }
        const data = await response.json();
        setProducts(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [selectedCategory]);

  const addToCart = async (product) => {
    try {
      setAddingToCart(product.id); // Disable button for the product being added
      const response = await fetch('http://localhost:5000/api/cart', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          productId: product.id,
          quantity: 1,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to add product to cart');
      }

      // Update cart state
      setCart((prevCart) => {
        const existingProduct = prevCart.find((item) => item.id === product.id);
        if (existingProduct) {
          return prevCart.map((item) =>
            item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
          );
        }
        return [...prevCart, { ...product, quantity: 1 }];
      });
    } catch (err) {
      setError(err.message);
    } finally {
      setAddingToCart(null); // Re-enable button
    }
  };

  const removeFromCart = async (productId) => {
    console.log("Product ID to remove:", productId); // Debugging line
    try {
      const response = await fetch(`http://localhost:5000/api/cart/${productId}`, {
        method: 'DELETE',
      });
  
      console.log(response); // Log the response to check if it's correct
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to remove product from cart');
      }
  
      // Remove from cart state
      setCart((prevCart) => {
        const updatedCart = prevCart.filter((item) => item.id !== productId);
        console.log("Updated Cart:", updatedCart); // Debugging line
        return updatedCart;
      });
    } catch (err) {
      setError(err.message);
    }
  };
  
  const calculateTotal = () => {
    return cart.reduce((total, item) => total + item.price * item.quantity, 0);
  };

  if (loading) return <div className="loader">Loading...</div>;
  if (error) return <div className="error">Error: {error}</div>;

  return (
    <div className="product-container">
      <h1>All Products</h1>

      {/* Category Filter */}
      <div className="category-filter">
        <h3>Select Category</h3>
        <div className="category-buttons">
          <button onClick={() => setSelectedCategory(null)} className="category-btn">
            All Products
          </button>
          {categories.map((category) => (
            <button
              key={category.id}
              onClick={() => setSelectedCategory(category.id)}
              className="category-btn"
            >
              {category.name}
            </button>
          ))}
        </div>
      </div>

      {/* Display Products */}
      <div className="products">
        {products.map((product) => (
          <div key={product.id} className="product-card">
            <img src={product.image} alt={product.name} />
            <h3>{product.name}</h3>
            <p>Price: ₹{product.price}</p>
            <p>Category: {product.category_name}</p>
            <button
              onClick={() => addToCart(product)}
              disabled={addingToCart === product.id}
              className="add-to-cart-btn"
            >
              {addingToCart === product.id ? 'Adding...' : 'Add to Cart'}
            </button>
          </div>
        ))}
      </div>

      {/* Cart Section */}
      <div className="cart-section">
        <h2>Cart</h2>
        {cart.length > 0 ? (
          <>
            <ul>
              {cart.map((item) => (
                <li key={item.id}>
                  {item.name} (x{item.quantity}) - ₹{item.price * item.quantity}
                  <button onClick={() => removeFromCart(item.id)} className="remove-from-cart-btn">
                    Remove
                  </button>
                </li>
              ))}
            </ul>
            <p className="cart-total">Total: ₹{calculateTotal()}</p>
            <button className="checkout-btn">Proceed to Checkout</button>
          </>
        ) : (
          <p>Your cart is empty.</p>
        )}
      </div>
    </div>
  );
};

export default Products;
